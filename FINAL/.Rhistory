sum(cancer)
param_boot <- function(alpha, beta, mat){
temp_mat <- mat
for(i in 1:dim(mat)[1]){
for(j in 1:dim(mat)[2]){
if(temp_mat[i,j]!=0){
temp_mat[i,j]=1
dens1 <- exp(alpha*sum(temp_mat) + beta*neighbor_sum(temp_mat)/2)
temp_mat[i,j] = -1
dens2 <- exp(alpha*sum(temp_mat) + beta*neighbor_sum(temp_mat)/2)
p = dens1 / ( dens1 + dens2)
u = runif(1)
if(u < p){
temp_mat[i,j] = 1
}
else{
temp_mat[i,j] = -1
}
}
else{
temp_mat[i,j]=0
}
}
}
res <- temp_mat
return(temp_mat)
}
s1 <- c()
s2 <- c()
for(i in 1:5){
new <- param_boot(-0.3205, 0.1115, cancer)
s1[i] <- sum(new)
s2[i] <- neighbor_sum(new)
}
new_cancer1 <- param_boot(-0.3205, 0.1115, cancer)
sum(new_cancer1)
neighbor_sum(new_cancer1)
s1
s2
mple_df <- read.csv('mple_df.csv', header=TRUE)
mple_df
help('read.csv')
mple_df <- read.csv('mple_df.csv', header=TRUE, nrows = -1)
mple_df
mple_df <- read.csv('mple_df.csv', header=TRUE, ncols = -1)
mple_df
mple_df <- read.csv('mple_df.csv', header=TRUE)
mple_df[,-1]
mple_df <- mple_df[,-1]
dmh_df <- read.csv('dmh_df.csv', header=TRUE)
dmh_df <- dmh_df[,-1]
aex_df <- read.csv('aex_df.csv', header=TRUE)
aex_df <- aex_df[,-1]
s1_obs <- sum(cancer)
s2_obs <- neigh_sum(cancer)
mple_s1_bias2 <- sum((mple_df$s1-s1_obs)^2)/1000
mple_s1_var <- sum((mple_df$s1-mean(mple_df$s1))^2)/1000
sqrt(mple_s1_bias2+mple_s1_var)
dmh_s1_bias2 <- sum((dmh_df$s1-s1_obs)^2)/1000
dmh_s1_var <- sum((dmh_df$s1-mean(dmh_df$s1))^2)/1000
sqrt(dmh_s1_bias2+dmh_s1_var)
aex_s1_bias2 <- sum((aex_df$s1-s1_obs)^2)/1000
aex_s1_var <- sum((aex_df$s1-mean(aex_df$s1))^2)/1000
sqrt(aex_s1_bias2+aex_s1_var)
mple_s2_bias2 <- sum((mple_df$s2-s2_obs)^2)/1000
mple_s2_var <- sum((mple_df$s2-mean(mple_df$s2))^2)/1000
sqrt(mple_s2_bias2+mple_s2_var)
dmh_s2_bias2 <- sum((dmh_df$s2-s2_obs)^2)/1000
dmh_s2_var <- sum((dmh_df$s2-mean(dmh_df$s2))^2)/1000
sqrt(dmh_s2_bias2+dmh_s2_var)
aex_s2_bias2 <- sum((aex_df$s2-s2_obs)^2)/1000
aex_s2_var <- sum((aex_df$s2-mean(aex_df$s2))^2)/1000
sqrt(aex_s2_bias2+aex_s2_var)
########################
##3
########################
postdf <- read.csv('output.csv')
clinic_df <- read.csv('data.csv')
View(postdf)
View(clinic_df)
trape(0,1,100)
sourceCpp('final2.cpp')
trape(0,1,100)
trape(1,0,100)
library(lme4)
########################
##2
########################
##(b)
rikz <- read.table('rikz.txt', header=TRUE)
lmd <- lmer(Richness ~ NAP + (-1|Beach), data=rikz)
lmd
lmd <- lmer(Richness ~ NAP + (NAP -1|Beach) - 1, data=rikz)
lmd
uid <- c(1:45)
EM <- function(y, x, z, uid, iteration){
y <- as.matrix(y)
x <- as.matrix(x)
z <- as.matrix(z)
N <- length(uid)
n <- length(y)
##Initial value
beta <- as.vector(solve(t(x)%*%x)%*%t(x)%*%y)
g <- diag(rep(1, ncol(z)))
sig2 <- 1
residu <- as.vector(y - x%*%beta)
##Iteration
for(j in 1:iteration){
##E-step
P <- 0
R <- 0
C <- 0
mu <- NULL
u <- NULL
for(i in uid){
##E-step
xi <- x[i,]
zi <- z[i,]
residui <- residu[i]
gammai <- solve(t(zi)%*%zi/sig2 + solve(g))
mui <- (gammai%*%t(zi)%*%residui)/sig2
mu <- c(mu, mui)
u <- c(u, zi%*%mui)
si <- gammai + mui %*% t(mui)
R <- R + si
P <- P + sum(diag(si%*%t(zi)%*%zi))
C <- C + t(mui) %*% t(zi) %*% residui
}
##M-step
beta <- as.vector(solve(t(x) %*% x) %*% t(x) %*% (y-u))
residu <- as.vector(y-x%*%beta)
sig2 <- (sum(residu^2)-2*C[1] + P)/n
g <- as.matrix(R/N)
}
return(list(beta=beta, g=g, sigma2 = sig2))
}
EM(y,x,z,uid, 10000)
x <- rikz$NAP
y <- rikz$Richness
z <- rikz$Beach
uid <- c(1:45)
EM <- function(y, x, z, uid, iteration){
y <- as.matrix(y)
x <- as.matrix(x)
z <- as.matrix(z)
N <- length(uid)
n <- length(y)
##Initial value
beta <- as.vector(solve(t(x)%*%x)%*%t(x)%*%y)
g <- diag(rep(1, ncol(z)))
sig2 <- 1
residu <- as.vector(y - x%*%beta)
##Iteration
for(j in 1:iteration){
##E-step
P <- 0
R <- 0
C <- 0
mu <- NULL
u <- NULL
for(i in uid){
##E-step
xi <- x[i,]
zi <- z[i,]
residui <- residu[i]
gammai <- solve(t(zi)%*%zi/sig2 + solve(g))
mui <- (gammai%*%t(zi)%*%residui)/sig2
mu <- c(mu, mui)
u <- c(u, zi%*%mui)
si <- gammai + mui %*% t(mui)
R <- R + si
P <- P + sum(diag(si%*%t(zi)%*%zi))
C <- C + t(mui) %*% t(zi) %*% residui
}
##M-step
beta <- as.vector(solve(t(x) %*% x) %*% t(x) %*% (y-u))
residu <- as.vector(y-x%*%beta)
sig2 <- (sum(residu^2)-2*C[1] + P)/n
g <- as.matrix(R/N)
}
return(list(beta=beta, g=g, sigma2 = sig2))
}
EM(y,x,z,uid, 10000)
lmd
7.5^2
########################
##1
########################
set.seed(123)
library(Rcpp)
library(RcppArmadillo)
sourceCpp('final.cpp')
sourceCpp('final2.cpp')
##(a)
h_function <- function(x){
res <- (cos(50*x) + sin(20*x))^2
return(res)
}
h_prime <- function(x){
res <- 2*(cos(50*x)+sin(20*x))*(20*cos(20*x)-50*sin(50*x))
return(res)
}
h_2prime <- function(x){
res <- 2*(20*cos(20*x)-50*sin(50*x))^2 +
2*(-2500*cos(50*x)-400*sin(20*x))*(cos(50*x)+sin(20*x))
return(res)
}
Newton <- function(max_iteration, epsilon, x){
diff = 1
i = 0
while(abs(diff) > epsilon){
diff = -h_prime(x)/h_2prime(x)
x = x + diff
i = i + 1
if(i == max_iteration){
print("Iteration is over. Need More Max_iter")
break
}
if(x <0 | x>1){
print('Out of Range. Please Check the Starting value')
break
}
}
return(x)
}
x_seq <- seq(0, 1, length.out = 1000)
h_x <- h_function(x_seq)
plot(x_seq, h_x, type='l')
Newton(10000, 0.001, seq(0.36, 0.38, length.out = 10))
abline(v=0.3791384)
h_function(0.3791384)
x_seq <- seq(0, 1, length.out = 1000)
h_x <- h_function(x_seq)
plot(x_seq, h_x, type='l')
abline(v=0.3791384)
h_function(0.3791384)
########################
##3
########################
postdf <- read.csv('output.csv')
clinic_df <- read.csv('data.csv')
trape(1,0,100)
plot(x_seq, h_x, type='l')
Newton(10000, 0.001, seq(0.55, 0.58, length.out = 10))
abline(v=0.5633394)
h_function(0.5633394)
plot(x_seq, h_x, type='l')
Newton(10000, 0.001, seq(0.72, 0.75, length.out = 10))
abline(v=0.7480271)
h_function(0.7480271)
optimize(h_function, c(0,1), tol=0.0001, maximum = TRUE)
View(clinic_df)
N <- 2500
u <- runif(N)
xval1 <- rep(0, 2500)
r <- 0.5
annealing <- function(start_value, r,iteration){
run.current <- start_value
run.best <- run.current
best <- h_function(start_value)
runs <- c()
for(i in 1:iteration){
run_h <- h_function(run.current)
u <- runif(1, min = max((run.current-r),0), max=min((run.current+r),1))
stat <- exp(log(i) * (h_function(u) - h_function(run.current)))
p.current <- min(stat, 1)
if(runif(1)<p.current){
run.current <- u
run_h <- h_function(u)
}
if(run_h > best){
run.best <- run.current
best <- run_h
}
runs[i] <- run.current
}
res <- list(x= runs, max = c(run.best, best))
return(res)
}
anneal1 <- annealing(0.2, 0.5, 10000)
anneal2 <- annealing(0.4, 0.5, 10000)
anneal3 <- annealing(0.6, 0.5, 10000)
anneal4 <- annealing(0.8, 0.5, 10000)
anneal1$max
anneal2$max
anneal3$max
anneal4$max
plot(anneal1$x, h_function(anneal1$x), type='l', lwd=2, xlab='x', ylab='h(x)', main='Trajectory')
lines(anneal2$x, h_function(anneal2$x), col='2', lwd=2)
lines(anneal3$x, h_function(anneal3$x), col='3', lwd=2)
lines(anneal4$x, h_function(anneal4$x), col='4', lwd=2)
########################
##2
########################
##(b)
rikz <- read.table('rikz.txt', header=TRUE)
x <- rikz$NAP
y <- rikz$Richness
z <- rikz$Beach
uid <- c(1:45)
EM <- function(y, x, z, uid, iteration){
y <- as.matrix(y)
x <- as.matrix(x)
z <- as.matrix(z)
N <- length(uid)
n <- length(y)
##Initial value
beta <- as.vector(solve(t(x)%*%x)%*%t(x)%*%y)
g <- diag(rep(1, ncol(z)))
sig2 <- 1
residu <- as.vector(y - x%*%beta)
##Iteration
for(j in 1:iteration){
##E-step
P <- 0
R <- 0
C <- 0
mu <- NULL
u <- NULL
for(i in uid){
##E-step
xi <- x[i,]
zi <- z[i,]
residui <- residu[i]
gammai <- solve(t(zi)%*%zi/sig2 + solve(g))
mui <- (gammai%*%t(zi)%*%residui)/sig2
mu <- c(mu, mui)
u <- c(u, zi%*%mui)
si <- gammai + mui %*% t(mui)
R <- R + si
P <- P + sum(diag(si%*%t(zi)%*%zi))
C <- C + t(mui) %*% t(zi) %*% residui
}
##M-step
beta <- as.vector(solve(t(x) %*% x) %*% t(x) %*% (y-u))
residu <- as.vector(y-x%*%beta)
sig2 <- (sum(residu^2)-2*C[1] + P)/n
g <- as.matrix(R/N)
}
return(list(beta=beta, g=g, sigma2 = sig2))
}
EM(y,x,z,uid, 10000)
mple_df <- read.csv('mple_df.csv', header=TRUE)
mple_df <- mple_df[,-1]
dmh_df <- read.csv('dmh_df.csv', header=TRUE)
dmh_df <- dmh_df[,-1]
aex_df <- read.csv('aex_df.csv', header=TRUE)
aex_df <- aex_df[,-1]
s1_obs <- sum(cancer)
s2_obs <- neigh_sum(cancer)
mple_s1_bias2 <- sum((mple_df$s1-s1_obs)^2)/1000
########################
##4
########################
##data
uscancer <- readLines('UScancer.txt')
uscancer <- as.data.frame(uscancer)
dim(uscancer)
length(strsplit(as.character(uscancer[1,]), split='')[[1]])
cancer <- matrix(NA, nrow=58, ncol = 66)
for(i in 1:58){
charc <- strsplit(as.character(uscancer[i,]), split='')[[1]]
num <- as.numeric(charc)
cancer[i,] <- num
}
cancer[cancer==0] <- -1
cancer[cancer==2] <- 0
mple_df <- read.csv('mple_df.csv', header=TRUE)
mple_df <- mple_df[,-1]
dmh_df <- read.csv('dmh_df.csv', header=TRUE)
dmh_df <- dmh_df[,-1]
aex_df <- read.csv('aex_df.csv', header=TRUE)
aex_df <- aex_df[,-1]
s1_obs <- sum(cancer)
s2_obs <- neigh_sum(cancer)
mple_s1_bias2 <- sum((mple_df$s1-s1_obs)^2)/1000
mple_s1_var <- sum((mple_df$s1-mean(mple_df$s1))^2)/1000
sqrt(mple_s1_bias2+mple_s1_var)
dmh_s1_bias2 <- sum((dmh_df$s1-s1_obs)^2)/1000
dmh_s1_var <- sum((dmh_df$s1-mean(dmh_df$s1))^2)/1000
sqrt(dmh_s1_bias2+dmh_s1_var)
aex_s1_bias2 <- sum((aex_df$s1-s1_obs)^2)/1000
aex_s1_var <- sum((aex_df$s1-mean(aex_df$s1))^2)/1000
sqrt(aex_s1_bias2+aex_s1_var)
mple_s2_bias2 <- sum((mple_df$s2-s2_obs)^2)/1000
mple_s2_var <- sum((mple_df$s2-mean(mple_df$s2))^2)/1000
sqrt(mple_s2_bias2+mple_s2_var)
dmh_s2_bias2 <- sum((dmh_df$s2-s2_obs)^2)/1000
dmh_s2_var <- sum((dmh_df$s2-mean(dmh_df$s2))^2)/1000
sqrt(dmh_s2_bias2+dmh_s2_var)
aex_s2_bias2 <- sum((aex_df$s2-s2_obs)^2)/1000
aex_s2_var <- sum((aex_df$s2-mean(aex_df$s2))^2)/1000
sqrt(aex_s2_bias2+aex_s2_var)
mple_s1 <- sqrt(mple_s1_bias2+mple_s1_var)
dmh_s1 <- sqrt(dmh_s1_bias2+dmh_s1_var)
aex_s2 <- sqrt(aex_s1_bias2+aex_s1_var)
aex_s1 <- sqrt(aex_s1_bias2+aex_s1_var)
mple_s2 <- sqrt(mple_s2_bias2+mple_s2_var)
dmh_s2 <- sqrt(dmh_s2_bias2+dmh_s2_var)
aex_s2 <- sqrt(aex_s2_bias2+aex_s2_var)
rmse_df <- data.frame(mple = c(mple_s1, mple_s2), dmh = c(dmh_s1, dmh_s2), aex = c(aex_s1, aex_s2))
rmse_df
colnames(rmse_df)[1]
rownames(rmse_df)[1]
rownames(rmse_df)[1] <- 'S1'
rownames(rmse_df) <- c('S1', 'S2')
rmse_df
View(postdf)
########################
##3
########################
postdf <- read.csv('output.csv')
clinic_df <- read.csv('data.csv')
sourceCpp('final2.cpp')
trape(1,0,100)
sourceCpp('final2.cpp')
library(Rcpp)
library(RcppArmadillo)
sourceCpp('final2.cpp')
trape2(1,0,100)
View(clinic_df)
trape(0,2,100)
trape(0,1,100)
trape2(0,2,100)
########################
##1
########################
set.seed(123)
library(Rcpp)
library(RcppArmadillo)
sourceCpp('final.cpp')
sourceCpp('final2.cpp')
sourceCpp('final3.cpp')
trape(0,2,100)
simpsons(0,2 100)
simpsons(0,2,100)
trape(0,1,100)
simpsons(0,1,100)
trape2(0,2,100)
trape2(6,0,2,100)
simpson2(6,0,2,100)
trape2(6,0,2,1000)
simpson2(6,0,2,1000)
trape2(6,0,1,1000)
simpson2(6,0,1,1000)
trape(0,1,1000)
simpsons(0,1,1000)
sapply(clinic_df[1,], trape())
sapply(c(0,1,1000), trape())
sapply(c(0,1,1000), trape(w,a,n))
lapply(c(clinic_df[1:100,1:2],1000),trape(w,a,n))
w <- clinic_df[1:100,1]
a <- clinic_df[1:100,1]
n <- rep(1000, 100)
n
trape(w,a, n)
########################
##1
########################
set.seed(123)
library(Rcpp)
library(RcppArmadillo)
sourceCpp('final.cpp')
sourceCpp('final2.cpp')
sourceCpp('final3.cpp')
########################
##3
########################
postdf <- read.csv('output.csv')
clinic_df <- read.csv('data.csv')
for(i in 1:100){
trape_list1 <- trape(clinic_df[i,1], clinic_df[i,2], 1000)
simpson_list1 <- simpsons(clinic_df[i,1], clinic_df[i,2], 1000)
}
trape_list1
trape_list1 <- c()
simpson_list1 <- c()
for(i in 1:100){
trape_list1[i] <- trape(clinic_df[i,1], clinic_df[i,2], 1000)
simpson_list1[i] <- simpsons(clinic_df[i,1], clinic_df[i,2], 1000)
}
trape_list1
list1_df <- data.frame(trape = trape_list1, simpson = simpson_list1)
trape_list2 <- c()
simpson_list2 <- c()
for(i in 1:100){
trape_list2[i] <- trape2(clinic_df[i,3],clinic_df[i,1], clinic_df[i,2], 1000)
simpson_list2[i] <- simpsons2(clinic_df[i,3],clinic_df[i,1], clinic_df[i,2], 1000)
}
for(i in 1:100){
trape_list2[i] <- trape2(clinic_df[i,3],clinic_df[i,1], clinic_df[i,2], 1000)
simpson_list2[i] <- simpson2(clinic_df[i,3],clinic_df[i,1], clinic_df[i,2], 1000)
}
list2_df <- data.frame(trape = trape_list2, simpson = simpson_list2)
list1_df
list2_df
trape2(6, 0, 2, 1000)
trape_list2 <- c()
simpson_list2 <- c()
for(i in 1:100){
trape_list2[i] <- trape2(clinic_df[i,4],clinic_df[i,1], clinic_df[i,2], 1000)
simpson_list2[i] <- simpson2(clinic_df[i,4],clinic_df[i,1], clinic_df[i,2], 1000)
}
list2_df <- data.frame(trape = trape_list2, simpson = simpson_list2)
list2_df
write.csv(list1_df, file='q3_list1')
write.csv(list2_df, file='q3_list2')
write.csv(list1_df, file='q3_list1.csv')
write.csv(list2_df, file='q3_list2.csv')
list1_df
list1_df
list2_df
