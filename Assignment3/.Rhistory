l = loglik(alpha,beta,mu,lambda,x)
more = TRUE
while(more)
{
l.old = l
pi = (beta*exp(-mu)*mu^i + (1-alpha-beta)*exp(-lambda)*lambda^i)
pi[1] = pi[1]+alpha
zstat0 = alpha/pi[1]
tstat = beta*exp(-mu)*mu^i/pi
pstat = (1-alpha-beta)*exp(-lambda)*lambda^i/pi
alpha = x$freq[1]*zstat0/N
beta = sum(x$freq*tstat)/N
mu = sum(i*x$freq*tstat)/sum(x$freq*tstat)
lambda = sum(i*x$freq*pstat)/sum(x$freq*pstat)
param = c(log(alpha/(1-alpha)),log(beta/(1-beta)),log(mu),log(1-alpha-beta))
l = loglik(alpha,beta,mu,lambda,x)
more = abs(l-l.old)>eps
show(c(alpha,beta,mu,lambda,l))
}
print("Estimates from the EM algorithm")
show(c(alpha,beta,mu,lambda))
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
more = TRUE
while(more)
{
l.old = l
pi = (beta*exp(-mu)*mu^i + (1-alpha-beta)*exp(-lambda)*lambda^i)
pi[1] = pi[1]+alpha
zstat0 = alpha/pi[1]
tstat = beta*exp(-mu)*mu^i/pi
pstat = (1-alpha-beta)*exp(-lambda)*lambda^i/pi
alpha = x$obs[1]*zstat0/N
beta = sum(x$obs*tstat)/N
mu = sum(i*x$obs*tstat)/sum(x$obs*tstat)
lambda = sum(i*x$obs*pstat)/sum(x$obs*pstat)
param = c(log(alpha/(1-alpha)),log(beta/(1-beta)),log(mu),log(1-alpha-beta))
l = loglik(alpha,beta,mu,lambda,x)
more = abs(l-l.old)>eps
show(c(alpha,beta,mu,lambda,l))
}
print("Estimates from the EM algorithm")
show(c(alpha,beta,mu,lambda))
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
e.step2 = function(param){
#pi(theta) setting
pi = (param[2]*exp(-param[3])*param[3]^i +
(1-param[1]-param[2])*exp(-param[4])*param[4]^i)
pi[1] = pi[1] + param[1]
#z_0, ti(theta), pi(theta) setting
z_0 = param[1]/pi[1]
t = param[2]*exp(-param[3])*param[3]^i/pi
p = (1-param[1]-param[2])*exp(-param[4])*param[4]^i/pi
#update n_z0, n_t, n_p
n_z0 = x$obs[1]*z_0
n_t = x$obs*t
n_p = x$obs*p
sum_t = sum(n_t)
sum_p = sum(n_p)
sum_it = sum(i*n_t)
sum_ip = sum(i*n_p)
n = c(n_z0, sum_t, sum_p, sum_it, sum_ip)
return(n)
}
m.step2 = function(n){
alpha = n[1]/N
beta = n[2]/N
mu = n[4]/n[2]
lambda = n[5]/n[3]
param = c(alpha, beta, mu, lambda)
return(param)
}
while(difference>eps){
e.step2(param)
m.step2(n)
l_old = l
l = loglik(param[1], param[2], param[3], param[4],x)
difference = abs(l_old - l)
show(param)
}
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
e.step2 = function(param){
#pi(theta) setting
pi = (param[2]*exp(-param[3])*param[3]^i +
(1-param[1]-param[2])*exp(-param[4])*param[4]^i)
pi[1] = pi[1] + param[1]
#z_0, ti(theta), pi(theta) setting
z_0 = param[1]/pi[1]
t = param[2]*exp(-param[3])*param[3]^i/pi
p = (1-param[1]-param[2])*exp(-param[4])*param[4]^i/pi
#update n_z0, n_t, n_p
n_z0 = x$obs[1]*z_0
n_t = x$obs*t
n_p = x$obs*p
sum_t = sum(n_t)
sum_p = sum(n_p)
sum_it = sum(i*n_t)
sum_ip = sum(i*n_p)
n = c(n_z0, sum_t, sum_p, sum_it, sum_ip)
return(n)
}
m.step2 = function(n){
alpha = n[1]/N
beta = n[2]/N
mu = n[4]/n[2]
lambda = n[5]/n[3]
param = c(alpha, beta, mu, lambda)
return(param)
}
while(difference>eps){
e.step2(param)
m.step2(n)
l_old = l
l = loglik(param[1], param[2], param[3], param[4],x)
difference = abs(l_old - l)
show(param)
}
e.step2(param)
m.step2(n)
e.step2 = function(param){
#pi(theta) setting
pi = (param[2]*exp(-param[3])*param[3]^i +
(1-param[1]-param[2])*exp(-param[4])*param[4]^i)
pi[1] = pi[1] + param[1]
#z_0, ti(theta), pi(theta) setting
z_0 = param[1]/pi[1]
t = param[2]*exp(-param[3])*param[3]^i/pi
p = (1-param[1]-param[2])*exp(-param[4])*param[4]^i/pi
#update n_z0, n_t, n_p
n_z0 = x$obs[1]*z_0
n_t = x$obs*t
n_p = x$obs*p
sum_t = sum(n_t)
sum_p = sum(n_p)
sum_it = sum(i*n_t)
sum_ip = sum(i*n_p)
n = c(n_z0, sum_t, sum_p, sum_it, sum_ip)
return(n)
}
m.step2 = function(n){
alpha = n[1]/N
beta = n[2]/N
mu = n[4]/n[2]
lambda = n[5]/n[3]
param = c(alpha, beta, mu, lambda)
return(param)
}
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
while(difference>eps){
e.step2(param)
m.step2(n)
l_old = l
l = loglik(param[1], param[2], param[3], param[4],x)
difference = abs(l_old - l)
show(param)
}
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
while(difference>eps){
n = e.step2(param)
param = m.step2(n)
l_old = l
l = loglik(param[1], param[2], param[3], param[4],x)
difference = abs(l_old - l)
show(param)
}
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
for(i in 1:1000){
n = e.step2(param)
param = m.step2(n)
}
param
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
for(i in 1:2){
n = e.step2(param)
param = m.step2(n)
}
param
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
for(i in 1:20){
n = e.step2(param)
param = m.step2(n)
}
param
alpha = 0.6
beta = 0.3
mu = 1
lambda = 10
param = c(alpha, beta, mu, lambda)
i = 0:16
eps = 0.001
l = loglik(alpha,beta,mu,lambda,x)
x = data.frame(enc = c(0:16),
obs = c(379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1))
N = sum(x$obs)
for(i in 1:20){
n = e.step2(param)
param = m.step2(n)
}
param
##4.2
#data
obs = c(379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1)
N = sum(x$obs)
library(Rcpp)
library(RcppArmadillo)
library(rstudioapi)
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
##4.2
#data
obs = c(379,299,222,145,109,95,73,59,45,30,24,12,4,2,0,1,1)
N = sum(x$obs)
itr = 500
##4.2
#data
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
N = sum(x$obs)
itr = 500
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
hiv_out(N, param, obs, itr)
sourceCpp('HW3.cpp')
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
N = sum(x$obs)
itr = 500
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
pi_f(1, param)
pi_f(2, param)
pi_f(3, param)
z_0(1, param)
t(1, param)
p(1, param)
hiv_out(N, param, obs, 1)
hiv_out(N, param, obs, 2)
hiv_out(N, param, obs, 3)
hiv_out(N, param, obs, 5)
obs
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
##4.2
#data
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
N = sum(x$obs)
itr = 500
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
hiv_out(N, param, obs, itr)
hiv_out(N, param, obs, 200)
hiv_out(N, param, obs, 100)
sourceCpp('HW3.cpp')
sourceCpp('HW3.cpp')
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 500
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
hiv_out2(param, obs, itr)
library(Rcpp)
library(RcppArmadillo)
library(rstudioapi)
sourceCpp('HW3.cpp')
x = c(38,34,125)
n = rep(0,4)
theta = 1/2
p = c(1/2-theta/2, theta/4, theta/4, 1/2)
itr = 50
multi_out(x,p)
multi_out(x,p, itr)
sum(multi_out(x,p,itr))
x = c(85, 196, 341) #observed data (carbonaria, insularia, typica)
n = rep(0,6) #expected number of each phenotype (CC, CI, CT, II, IT, TT)
p = rep(1/3,3) #probabilities of allele(carbonaria, insularia, typica)
itr = 50
pep_out1(x, p, itr)
x = c(85, 196, 341, 578)
#expected number of each phenotype (CC, CI, CT, II, IT, TT)
n = rep(0,6)
p = rep(1/3,3) #probabilities of allele(carbonaria, insularia, typica)
itr = 30
pep_out2(x, p, itr)
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 500
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
#RCPP
hiv_out2(param, obs, itr)
#RCPP
hiv_out(param, obs, itr)
library(Rcpp)
library(RcppArmadillo)
library(rstudioapi)
sourceCpp('HW3.cpp')
x = c(38,34,125)
n = rep(0,4)
theta = 1/2
p = c(1/2-theta/2, theta/4, theta/4, 1/2)
itr = 50
#E-step
e.step = function(x, p){
n1 = 38
n2 = 34
n3 = 125*(p[3]/(p[4]+p[3]))
n= c(n1,n2,n3)
return(n)
}
#M-step
m.step =function(n){
theta = (34+n[3])/(72+n[3])
p = c(1/2-theta/2, theta/4, theta/4, 1/2)
return(p)
}
#Iteration
for(i in 1:itr){
n = e.step(x,p)
p = m.step(n)
}
#output
p
sum(p)
#RCPP
x = c(38,34,125)
n = rep(0,4)
theta = 1/2
p = c(1/2-theta/2, theta/4, theta/4, 1/2)
itr = 50
multi_out(x,p, itr)
x = c(85, 196, 341) #observed data (carbonaria, insularia, typica)
n = rep(0,6) #expected number of each phenotype (CC, CI, CT, II, IT, TT)
p = rep(1/3,3) #probabilities of allele(carbonaria, insularia, typica)
itr = 50
#E-Step
e.step = function(x,p){
n.cc = (x[1]*(p[1]^2))/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ci = (2*x[1]*p[1]*p[2])/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ct = (2*x[1]*p[1]*p[3])/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ii = (x[2]*(p[2]^2))/((p[2]^2)+2*p[2]*p[3])
n.it = (2*x[2]*p[2]*p[3])/((p[2]^2)+2*p[2]*p[3])
n = c(n.cc,n.ci,n.ct,n.ii,n.it,x[3])
return(n)
}
#M-step
m.step = function(x,n){
p.c = (2*n[1]+n[2]+n[3])/(2*sum(x))
p.i = (2*n[4]+n[5]+n[2])/(2*sum(x))
p.t = (2*n[6]+n[3]+n[5])/(2*sum(x))
p = c(p.c,p.i,p.t)
return(p)
}
## Iteration
for(i in 1:itr){
n = e.step(x,p)
p = m.step(x,n)
}
## OUTPUT
p
sum(p)
##RCPP
x = c(85, 196, 341)
n = rep(0,6)
p = rep(1/3,3)
itr = 50
pep_out1(x, p, itr)
#observed data (carbonaria, insularia, typica, in+ty)
x = c(85, 196, 341, 578)
#expected number of each phenotype (CC, CI, CT, II, IT, TT)
n = rep(0,6)
p = rep(1/3,3) #probabilities of allele(carbonaria, insularia, typica)
itr = 30
#E-Step
e.step = function(x,p){
n.cc = (x[1]*(p[1]^2))/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ci = (2*x[1]*p[1]*p[2])/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ct = (2*x[1]*p[1]*p[3])/((p[1]^2)+2*p[1]*p[2]+2*p[1]*p[3])
n.ii = (x[2]*(p[2]^2))/((p[2]^2)+2*p[2]*p[3]) + ((x[4])*(p[2]^2))/((p[2]^2)+2*p[2]*p[3]+p[3]^2)
n.it = (2*x[2]*p[2]*p[3])/((p[2]^2)+2*p[2]*p[3]) + (2*x[4]*p[2]*p[3])/((p[2]^2)+2*p[2]*p[3]+p[3]^2)
n.tt = x[3] + ((x[4])*(p[3]^2))/((p[2]^2)+2*p[2]*p[3]+p[3]^2)
n = c(n.cc,n.ci,n.ct,n.ii,n.it,n.tt)
return(n)
}
#M-step
m.step = function(x,n){
p.c = (2*n[1]+n[2]+n[3])/(2*sum(x))
p.i = (2*n[4]+n[5]+n[2])/(2*sum(x))
p.t = (2*n[6]+n[3]+n[5])/(2*sum(x))
p = c(p.c,p.i,p.t)
return(p)
}
## Iteration
for(i in 1:itr){
n = e.step(x,p)
p = m.step(x,n)
}
## OUTPUT
p
sum(p)
##RCPP
x = c(85, 196, 341, 578)
n = rep(0,6)
p = rep(1/3,3)
itr = 30
pep_out2(x, p, itr)
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 50
alpha = 0.6
beta = 0.3
mu = 1.0
lambda = 10.0
param = c(alpha, beta, mu, lambda)
#RCPP
hiv_out(param, obs, itr)
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 50
alpha = 0.5
beta = 0.2
mu = 5.0
lambda = 5.0
param = c(alpha, beta, mu, lambda)
#RCPP
hiv_out(param, obs, itr)
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 100
alpha = 0.5
beta = 0.2
mu = 1.0
lambda = 8.0
param = c(alpha, beta, mu, lambda)
#RCPP
hiv_out(param, obs, itr)
obs = c(379.0,299.0,222.0,145.0,109.0,95.0,73.0,59.0,45.0,30.0,24.0,12.0,4.0,2.0,0.0,1.0,1.0)
itr = 100
alpha = 0.5
beta = 0.2
mu = 1.0
lambda = 5.0
param = c(alpha, beta, mu, lambda)
#RCPP
hiv_out(param, obs, itr)
