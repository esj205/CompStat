double f_test(vec x, double mean, double sd){
double res = accu(normpdf(x, mean, sd));
return res;
}
sourceCpp('HW4.cpp')
f_test(x, mean(x), sd)
sum(dnorm(x, mean(x), sd))
sourceCpp('HW4.cpp')
dnorm(x, mean(x), sd)*dnorm(x,mean(x),sd)
sum(dnorm(x, mean(x), sd)*dnorm(x,mean(x),sd))
f_test(x, mean(x), sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sum(dnorm(x, mean(x), sd)*dnorm(x,mean(x),sd))
f_test(x, mean(x), sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
a_test(4)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
a_test(4)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
test(4,2)
test(6,2)
sourceCpp('HW4.cpp')
test(5,2)
sourceCpp('HW4.cpp')
cauchy_pdf(x, 5, 2)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
cauchy_pdf(x, 5, 2)
dcauchy(x, 5, 2)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
f_test(x, mean(x), sd)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
f(x, mean(x), sd)
sum(f(x, mean(x), sd))
sourceCpp('HW4.cpp')
f_test(x, mean(x), sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
h   = (interval[2]-interval[1])/n
h   = (interval[2]-interval[1])/100
(0:(n-1))*h
(0:(100-1))*h
h
0:100-1
0:99
sourceCpp('HW4.cpp')
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
#riemann
riemann = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (0:(n-1))*h
out = h*sum(f(x, mean(data), sd))
return(out)
}
1/riemann(interval, n=100, data=x, sd=sd)
1/riemann_cpp(interval, 100, mean(x), sd)
sourceCpp('HW4.cpp')
1/riemann_cpp(interval, 100, mean(x), sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
cauchy_pdf(x, 5, 2)
cauchy_pdf(2, 5, 2)
dcauchy(2, 5, 2)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
1/trapezoidal_cpp(interval, 100, mean(x), sd)
1/riemann_cpp(interval, 100, mean(x), sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
1/simpsons_cpp(interval, 100, mean(x), sd)
1/riemann_cpp(interval, 100, mean(x), sd)
1/trapezoidal_cpp(interval, 100, mean(x), sd)
sourceCpp('HW4.cpp')
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
res = 7.84654*out
return(res)
}
interval <- c(2,8)
riemann(interval, 100, x, sd)
riemann_cpp2(interval, 100, mean(x), sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
back_test(4)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
riemann_list(interavl, mean(x), sd, 0.0001)
riemann_list(interval, mean(x), sd, 0.0001)
riemann_table(interval, x, sd, 0.0001)
sourceCpp('HW4.cpp')
trapezoidal_df(interval, mean(x), sd, 0.0001)
trapezoidal_table(interavl, x, sd, 0.0001)
trapezoidal_table(interval, x, sd, 0.0001)
trapezoidal2(interval, 10, x, sd)
trapezoidal(interval, 4, x, sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
res = 7.84654*out
return(res)
}
interval <- c(2,8)
#trapezoidal
trapezoidal = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (1:(n-1))*h
low = h/2*f(interval[1], mean(data), sd)
middle = h*sum(f(x,mean(data),sd))
high = h/2*f(interval[2], mean(data), sd)
out = sum(low, middle, high)
return(out)
}
trapezoidal(interval, 4, x, sd)
trapezoidal_table(interval, x, sd, 0.0001)
sourceCpp('HW4.cpp')
trapezoidal_cpp2(interval, 4, mean(x), sd)
trapezoidal_cpp(interval, 4, mean(x), sd)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
#trapezoidal
trapezoidal = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (1:(n-1))*h
low = h/2*f(interval[1], mean(data), sd)
middle = h*sum(f(x,mean(data),sd))
high = h/2*f(interval[2], mean(data), sd)
out = sum(low, middle, high)
return(out)
}
trapezoidal(interval, 4, x, sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
#trapezoidal
trapezoidal = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (1:(n-1))*h
low = h/2*f(interval[1], mean(data), sd)
middle = h*sum(f(x,mean(data),sd))
high = h/2*f(interval[2], mean(data), sd)
out = sum(low, middle, high)
return(out)
}
trapezoidal(interval, 4, x, sd)
trapezoidal_cpp(interval, 4, mean(x), sd)
trapezoidal_cpp(c(2,8), 4, mean(x), sd)
trapezoidal(c(2,8), 4, x, sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
#riemann
riemann = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (0:(n-1))*h
out = h*sum(f(x, mean(data), sd))
return(out)
}
1/riemann(interval, n=100, data=x, sd=sd)
#trapezoidal
trapezoidal = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (1:(n-1))*h
low = h/2*f(interval[1], mean(data), sd)
middle = h*sum(f(x,mean(data),sd))
high = h/2*f(interval[2], mean(data), sd)
out = sum(low, middle, high)
return(out)
}
sourceCpp('HW4.cpp')
trapezoidal_cpp(c(2,8), 4, mean(x), sd)
trapezoidal(c(2,8), 4, x, sd)
#simpson
simpsons = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (0:n)*h
out = NULL
for(i in 1:(n/2)){
out[i] = h/3*f(x[2*i - 1], mean(data), sd)
out[i] = out[i] + 4*h/3*f(x[2*i],mean(data), sd)
out[i] = out[i] + h/3*f(x[2*i + 1],mean(data), sd)
}
res=sum(out)
return(res)
}
simpsons(interval, 4, x, sd)
simpsons_cpp(interval, 4, mean(x), sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
return(out)
}
#riemann
riemann = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (0:(n-1))*h
out = h*sum(f(x, mean(data), sd))
return(out)
}
1/riemann(interval, n=100, data=x, sd=sd)
#trapezoidal
trapezoidal = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (1:(n-1))*h
low = h/2*f(interval[1], mean(data), sd)
middle = h*sum(f(x,mean(data),sd))
high = h/2*f(interval[2], mean(data), sd)
out = sum(low, middle, high)
return(out)
}
1/trapezoidal(interval, n=100, data=x, sd=sd)
#simpson
simpsons = function(interval, n, data, sd){
h   = (interval[2]-interval[1])/n
x   = interval[1] + (0:n)*h
out = NULL
for(i in 1:(n/2)){
out[i] = h/3*f(x[2*i - 1], mean(data), sd)
out[i] = out[i] + 4*h/3*f(x[2*i],mean(data), sd)
out[i] = out[i] + h/3*f(x[2*i + 1],mean(data), sd)
}
res=sum(out)
return(res)
}
1/simpsons(interval, n=100, data=x, sd=sd)
f = function(x, mean, sd){
out = dnorm(x, mean, sd)*dcauchy(x, 5,2)
res = 7.84654*out
return(res)
}
interval <- c(2,8)
riemann_table <- function(interval, x, sd, tol){
estimation = c()
relative_error = c()
sub_interval = c()
iter = 1
n = 2
diff = 1
while(diff > tol){
if(iter==1){
first_est = riemann(interval, n, x, sd)
estimation[iter] = first_est
sub_interval[iter] = n
relative_error[iter] = 0
n=n+2
iter = iter+1
old_estimation = first_est
}
else{
new_estimation=riemann(interval, n, x, sd)
diff = abs(new_estimation - old_estimation)
estimation[iter] = new_estimation
sub_interval[iter] = n
relative_error[iter] = new_estimation - old_estimation
n=n+2
iter = iter+1
old_estimation = new_estimation
}
}
res = data.frame(estimation=estimation, sub_interval=sub_interval, relative_error=relative_error)
return(res)
}
riemann_table(interval, x, sd, tol=0.0001)
trapezoidal_table <- function(interval, x, sd, tol){
estimation = c()
relative_error = c()
sub_interval = c()
iter = 1
n = 2
diff = 1
while(diff > tol){
if(iter==1){
first_est = trapezoidal(interval, n, x, sd)
estimation[iter] = first_est
sub_interval[iter] = n
relative_error[iter] = 0
n=n+2
iter = iter+1
old_estimation = first_est
}
else{
new_estimation=trapezoidal(interval, n, x, sd)
diff = abs(new_estimation - old_estimation)
estimation[iter] = new_estimation
sub_interval[iter] = n
relative_error[iter] = new_estimation - old_estimation
n=n+2
iter = iter+1
old_estimation = new_estimation
}
}
res = data.frame(estimation=estimation, sub_interval=sub_interval, relative_error=relative_error)
return(res)
}
trapezoidal_table(interval, x, sd, tol=0.0001)
simpsons_table <- function(interval, x, sd, tol){
estimation = c()
relative_error = c()
sub_interval = c()
iter = 1
n = 2
diff = 1
while(diff > tol){
if(iter==1){
first_est = simpsons(interval, n, x, sd)
estimation[iter] = first_est
sub_interval[iter] = n
relative_error[iter] = 0
n=n+2
iter = iter+1
old_estimation = first_est
}
else{
new_estimation=simpsons(interval, n, x, sd)
diff = abs(new_estimation - old_estimation)
estimation[iter] = new_estimation
sub_interval[iter] = n
relative_error[iter] = new_estimation - old_estimation
n=n+2
iter = iter+1
old_estimation = new_estimation
}
}
res = data.frame(estimation=estimation, sub_interval=sub_interval, relative_error=relative_error)
return(res)
}
simpsons_table(interval, x, sd, tol=0.0001)
riem <- riemann_table(interval, x, sd, tol=0.0001)
trp <- trapezoidal_table(interval, x, sd, tol=0.0001)
simps <- simpsons_table(interval, x, sd, tol=0.0001)
riem
trp
simps
sourceCpp('HW4.cpp')
simpsons_df(interval, mean(x), sd, 0.0001)
riemann_df(interval, mean(x), sd, 0.0001)
trapezoidal_df(interval, mean(x), sd, 0.0001)
trp
sourceCpp('HW4.cpp')
#
library(Rcpp)
library(RcppArmadillo)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
triangle(10, 6)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
Romberg(10,6)
triangle(10, 6)
Romberg(2,6)
triangle(2, 6)
round(triangle(2, 6),7)
log2
log(2)
sourceCpp('HW4.cpp')
1/riemann_cpp(interval, 100, mean(x), sd)
1/trapezoidal_cpp(interval, 100, mean(x), sd)
1/simpsons_cpp(interval, 100, mean(x), sd)
##5.3
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
1/riemann_cpp(interval, 100, mean(x), sd)
1/trapezoidal_cpp(interval, 100, mean(x), sd)
1/simpsons_cpp(interval, 100, mean(x), sd)
##5.3
library(Rcpp)
library(RcppArmadillo)
sourceCpp('HW4.cpp')
#data
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
1/riemann_cpp(interval, 100, mean(x), sd)
1/trapezoidal_cpp(interval, 100, mean(x), sd)
1/simpsons_cpp(interval, 100, mean(x), sd)
interval <- c(2,8)
simpsons_df(interval, mean(x), sd, 0.0001)
riemann_df(interval, mean(x), sd, 0.0001)
trapezoidal_df(interval, mean(x), sd, 0.0001)
0.99605-0.9950120
#5.4
triangle(10, 6)
log(10)
#5.4
triangle(10, 8)
#5.4
triangle(5, 6)
#5.4
round(triangle(5, 6),7)
log(5)
sourceCpp('HW4.cpp')
##5.3
library(Rcpp)
library(RcppArmadillo)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
#(c)
interval <- c(exp(3)/(1+exp(3)), 1)
sourceCpp('HW4.cpp')
trapezoidal_cpp3(interval, 100, x_mean, sd)
sourceCpp('HW4.cpp')
sourceCpp('HW4.cpp')
#(d)
interval <- c(0, 1/3)
trapezoidal_cpp4(interval, 100, x_mean, sd)
sourceCpp('HW4.cpp')
trapezoidal_cpp4(interval, 100, x_mean, sd)
##5.3
library(Rcpp)
library(RcppArmadillo)
sourceCpp('HW4.cpp')
#data
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_mean <- mean(x)
sd <- sqrt(9/7)
interval <- seq(0,10, length.out = 100)
norm_dens <- dnorm(interval, mean=x_mean, sd=sd)
plot(interval, norm_dens, type='l')
interval <- c(0,10)
1/riemann_cpp(interval, 100, mean(x), sd)
1/trapezoidal_cpp(interval, 100, mean(x), sd)
1/simpsons_cpp(interval, 100, mean(x), sd)
interval <- c(2,8)
riemann_df(interval, mean(x), sd, 0.0001)
trapezoidal_df(interval, mean(x), sd, 0.0001)
simpsons_df(interval, mean(x), sd, 0.0001)
ri <- riemann_df(interval, mean(x), sd, 0.0001)
ri[13,3]
ri[13,3] > 0.0001
ri[12,3] > 0.0001
(ri[13,1]-ri[12,1])/ri[12,1]
ri[12,3] < 0.0001
