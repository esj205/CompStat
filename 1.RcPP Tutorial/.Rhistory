library(Rcpp)
sourceCpp('example1.cpp')
a = 1:4
output1 = 2*a
output2 = example1(a)
output2 = timesTwo(a)
library('Rcpp')
src1 <- 'NumericVector example1(NumericVector x){
NumericVector y;
y = 2*x;
return(y);
}
'
cppFunction(src1)
example1(1:4)
library('Rcpp')
sugar <- 'List Sugar_Ex (NumericVector x, Numeric Vector y){
NumericVector soma = x + y, res = x - y ;
NumericVector prod = x * y, div = x / y ;
LogicalVector menor = x<y, maior = x>y ;
LogicalVecotr igual = x==y, dif = x!=y ;
return List::create(soma, div, menor, dif);
}
'
cppFunction(sugar)
x = c(8,9,7,6)
y = c(1,7,2,3)
Sugar_Ex(x, y)
library('Rcpp')
sugar <- 'List sugar_Ex (NumericVector x, Numeric Vector y){
NumericVector soma = x + y, res = x - y ;
NumericVector prod = x * y, div = x / y ;
LogicalVector menor = x<y, maior = x>y ;
LogicalVecotr igual = x==y, dif = x!=y ;
return List::create(soma, div, menor, dif);
}
'
cppFunction(sugar)
x = c(8,9,7,6)
y = c(1,7,2,3)
sugar_Ex(x, y)
library('Rcpp')
sugar <- 'List sugar_Ex (NumericVector x, NumericVector y){
NumericVector soma = x + y, res = x - y ;
NumericVector prod = x * y, div = x / y ;
LogicalVector menor = x<y, maior = x>y ;
LogicalVecotr igual = x==y, dif = x!=y ;
return List::create(soma, div, menor, dif);
}
'
cppFunction(sugar)
x = c(8,9,7,6)
y = c(1,7,2,3)
sugar_Ex(x, y)
library('Rcpp')
sugar <- 'List sugar_Ex (NumericVector x, NumericVector y){
NumericVector soma = x + y, res = x - y ;
NumericVector prod = x * y, div = x / y ;
LogicalVector menor = x<y, maior = x>y ;
LogicalVector igual = x==y, dif = x!=y ;
return List::create(soma, div, menor, dif);
}
'
cppFunction(sugar)
x = c(8,9,7,6)
y = c(1,7,2,3)
sugar_Ex(x, y)
gamma <- 'NumericVector Ex_gamma(int n){
NumericVector x = rgamma(n,1,1);
return x;
}
'
cppFunction(gamma)
Ex_gamma(5)
gamma <- 'NumericVector Ex_gamma(int n, int a, int b){
NumericVector x = rgamma(n,a,b);
return x;
}
'
cppFunction(gamma)
gen = Ex_gamma(1000, 1, 1)
hist(gen, nclass = 100)
gibbs_r <- function(N, thin){
mat <- matrix(nrow=2, ncol=N)
x <- y <- 0
for (i in 1:N){
for (j in 1:thin) {
x <- rgamma(1, 3, y*y +4)
y <- rnorm(1, 1 / (x+1), 1 / sqrt(2*(x+1)))
}
mat[,i] <- c(x,y)
}
mat
}
output = gibbs_r(10000, 5)
hist(output$mat[,1],nclass=100)
hist(output$mat[,2],nclass=100)
output
View(output)
output[,1]
hist(output[1,], nclass=100)
hist(output[2,], nclass=100)
sourceCpp('gibbs_cpp.cpp')
sourceCpp('gibbs_cpp.cpp')
output2 = gibbs_cpp(10000, 5)
View(output2)
hist(output2[1,], nclass=100)
hist(output2[2,], nclass=100)
sourceCpp('gibbs_cpp2.cpp')
// [[Rcpp::depends(RcppArmadillo)]]
#include <RcppArmadillo.h>
using namespace arma;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
Rcpp::List gibbs_cpp2(int N, int thin){
arma::dmat mat(2, N, fill::zeros); //dmat은 double matrix라는 뜻
double x = 0.0, y = 0.0 ;
for(int i =0; i < N; i++){
for(int j=0; j < thin; j++){
x = R::rgamma(3, 1 / (y*y+4));
y = R::rnorm(1 / (x+1), 1 / sqrt(2*(x+1)));
}
mat(0, i) = x;
mat(1, i) = y;
}
Rcpp::List output;
output["mat"] = mat;
return(output);
}
// [[Rcpp::export]]
Rcpp::List gibbs_cpp3(int N, int thin){
arma::dvec x_results(N, fill::zeros);
arma::dvec y_results(N, fill::zeros);
double x = 0.0, y = 0.0;
for(int i; i<N; i++){
for(int j; j<thin, j++){
x = R::rgamma(3, 1 / (y*y+4));
y = R::rnorm(1 / (x+1), 1 / sqrt(2*(x+1)));
}
x_results(i) = x;
y_results(i) = y;
}
Rcpp::List output;
output['x'] = x_results;
output['y'] = y_results;
return(output);
}
sourceCpp('gibbs_cpp2.cpp')
sourceCpp('gibbs_cpp2.cpp')
output3 = gibbs_cpp2(10000, 5)
hist(output3$mat[1,], nclass=100)
hist(output3$mat[2,], nclass=100)
output4 = gibbs_cpp3(10000, 5)
output4 = gibbs_cpp3(10000, 5)
output4 = gibbs_cpp3(10000, 5)
sourceCpp('gibbs_cpp2.cpp')
output4 = gibbs_cpp3(10000, 5)
hist(output4$x, nclass=100)
hist(output4$y, nclass=100)
