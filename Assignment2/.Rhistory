} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic2[k,j]=run.aic
}
runs2[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
runs2
runs.aic2
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic2)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(100,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic2[i,]) }
##3-1(b)
#setting은 위와 동일
#combination function을 위해 gtools package 이용
runs3 = matrix(0,num.starts,m)
runs.aic3 = matrix(0,num.starts,itr)
library(gtools)
comb <-combinations(m,2) #독립변수에서 2개를 뽑는 경우의 수들
# INITIALIZES STARTING RUNS
set.seed(19676)
for(i in 1:num.starts){runs3[i,] = rbinom(m,1,.5)}
#random으로 열을 뽑는 것을 다섯 번 시행
## MAIN
for(k in 1:num.starts){
run.current = runs3[k,]
# ITERATES EACH RANDOM START
for(j in 1:itr){
run.vars = baseball.sub[,run.current==1] #1로 선택된 변수들 뽑아내기.
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2] #[1]은 equivalent d.f, [2]가 AIC
run.next = run.current
# TESTS ALL MODELS IN THE 2-NEIGHBORHOOD AND SELECTS THE
# MODEL WITH THE LOWEST AIC
for(i in 1:nrow(comb)){
run.step = run.current
run.step[comb[i,][1]] = !run.current[comb[i,][1]] #0이라면 1로 1이라면 0으로 바꿈.
run.step[comb[i,][2]] = !run.current[comb[i,][2]]
run.vars = baseball.sub[,run.step==1] #바뀐 것으로 variable을 새로 뽑음.
g = lm(salary.log~.,run.vars) #model 적용
run.step.aic = extractAIC(g)[2] #AIC 구하기
if(run.step.aic < run.aic){
run.next = run.step
run.aic = run.step.aic
} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic3[k,j]=run.aic
}
runs3[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
## OUTPUT
runs3 		# LISTS OF PREDICTORS
runs.aic3 	# AIC VALUES
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic3)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(360,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic[i,]) }
min(runs.aic)
min(runs.aic2)
min(runs.aic3)
runs
runs2
runs3
View(runs.aic)
sample(m,2)
sample(m,2)
## INITIAL VALUES
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log)
m = length(baseball.sub[1,])
cooling = c(rep(60,5),rep(120,5),rep(220,5)) #cooling schedule
tau.start = 10 #시작 온도
tau = rep(tau.start,15)
aics = NULL
# INITIALIZES STARTING RUN, TEMPERATURE SCHEDULE
set.seed(1234)
run = rbinom(m,1,.5)
run.current = run
run.vars = baseball.sub[,run.current==1]
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2]
best.aic = run.aic
aics = run.aic #여기까지는 3.3과 동일
for(j in 2:15){tau[j] = 0.9*tau[j-1]} #온도가 이전의 0.9배로 줄어들도록 설정.
## MAIN
for(j in 1:15){
# Model에서 더하거나 뺄 predictor를 랜덤으로 선택하고
# 더 나은지 확인한다. 더 낫다면 선택.
for(i in 1:cooling[j]){
pos = sample(1:m,1) #독립변수 중 한 개를 랜덤으로 선택
run.step = run.current
run.step[pos] = !run.current[pos] #선택된 독립변수를 flip
run.vars = baseball.sub[,run.step==1] #flip된 변수 적용
g = lm(salary.log~.,run.vars)
run.step.aic = extractAIC(g)[2]
p = min(1,exp((run.aic-extractAIC(g)[2])/tau[j]))
if(run.step.aic < run.aic){
run.current = run.step
run.aic = run.step.aic}
if(rbinom(1,1,p)){ #만약 run.step.aic가 run.aic보다 크다면 p의 확률로 run.step을 채택
run.current = run.step
run.aic = run.step.aic}
if(run.step.aic < best.aic){
#지금까지 나온 aic중 제일 작다면 best aic로 선택하고 best predictor subset으로 설정
run = run.step
best.aic = run.step.aic}
aics = c(aics,run.aic)
}
}
## OUTPUT
run 		# BEST LIST OF PREDICTORS FOUND
best.aic 	# AIC VALUE
aics		# VECTOR OF AIC VALUES
## PLOT OF AIC VALUES
plot(aics,ylim=c(-420,-360),type="n",ylab="AIC", xlab="Iteration")
lines(aics)
(1:2001)[aics==min(aics)]
##3-3(a)
#우선 cooling schedule에서 온도들을 올려보자.
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log)
m = length(baseball.sub[1,])
cooling2 = c(rep(100,5),rep(160,5),rep(280,5)) #cooling schedule
tau.start = 10 #시작 온도
tau = rep(tau.start,15)
aics2 = NULL
set.seed(1234)
run2 = rbinom(m,1,.5)
run.current = run2
run.vars = baseball.sub[,run.current==1]
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2]
best.aic2 = run.aic
aics2 = run.aic
for(j in 2:15){tau[j] = 0.9*tau[j-1]}
for(j in 1:15){
for(i in 1:cooling2[j]){
pos = sample(1:m,1)
run.step = run.current
run.step[pos] = !run.current[pos]
run.vars = baseball.sub[,run.step==1]
g = lm(salary.log~.,run.vars)
run.step.aic = extractAIC(g)[2]
p = min(1,exp((run.aic-extractAIC(g)[2])/tau[j]))
if(run.step.aic < run.aic){
run.current = run.step
run.aic = run.step.aic}
if(rbinom(1,1,p)){
run.current = run.step
run.aic = run.step.aic}
if(run.step.aic < best.aic2){
run2 = run.step
best.aic2 = run.step.aic}
aics2 = c(aics2,run.aic)
}
}
## OUTPUT
run2 		# BEST LIST OF PREDICTORS FOUND
best.aic2 	# AIC VALUE
aics2		# VECTOR OF AIC VALUES
## PLOT OF AIC VALUES
plot(aics2,ylim=c(-420,-360),type="n",ylab="AIC", xlab="Iteration")
lines(aics2)
length(aics2)
(1:2701)[aics2==min(aics2)]
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log)
m = length(baseball.sub[1,])
cooling3 = c(rep(40,5),rep(60,5),rep(80,5)) #cooling schedule
tau.start = 10 #시작 온도
tau = rep(tau.start,15)
aics3 = NULL
set.seed(1234)
run3 = rbinom(m,1,.5)
run.current = run3
run.vars = baseball.sub[,run.current==1]
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2]
best.aic3 = run.aic
aics3 = run.aic
for(j in 2:15){tau[j] = 0.9*tau[j-1]}
for(j in 1:15){
for(i in 1:cooling3[j]){
pos = sample(1:m,1)
run.step = run.current
run.step[pos] = !run.current[pos]
run.vars = baseball.sub[,run.step==1]
g = lm(salary.log~.,run.vars)
run.step.aic = extractAIC(g)[2]
p = min(1,exp((run.aic-extractAIC(g)[2])/tau[j]))
if(run.step.aic < run.aic){
run.current = run.step
run.aic = run.step.aic}
if(rbinom(1,1,p)){
run.current = run.step
run.aic = run.step.aic}
if(run.step.aic < best.aic3){
run3 = run.step
best.aic3 = run.step.aic}
aics3 = c(aics3,run.aic)
}
}
## OUTPUT
run3 		# BEST LIST OF PREDICTORS FOUND
best.aic3 	# AIC VALUE
aics3		# VECTOR OF AIC VALUES
## PLOT OF AIC VALUES
plot(aics3,ylim=c(-420,-360),type="n",ylab="AIC", xlab="Iteration")
lines(aics3)
length(aics3)
(1:901)[aics3==min(aics3)]
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log)
m = length(baseball.sub[1,])
cooling4 = c(rep(60,8),rep(120,8),rep(220,8)) #cooling schedule
tau.start = 10
tau = rep(tau.start,15)
aics4 = NULL
set.seed(1234)
run4 = rbinom(m,1,.5)
run.current = run4
run.vars = baseball.sub[,run.current==1]
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2]
best.aic4 = run.aic
aics4 = run.aic
for(j in 2:15){tau[j] = 0.9*tau[j-1]}
for(j in 1:15){
for(i in 1:cooling4[j]){
pos = sample(1:m,1)
run.step = run.current
run.step[pos] = !run.current[pos]
run.vars = baseball.sub[,run.step==1]
g = lm(salary.log~.,run.vars)
run.step.aic = extractAIC(g)[2]
p = min(1,exp((run.aic-extractAIC(g)[2])/tau[j]))
if(run.step.aic < run.aic){
run.current = run.step
run.aic = run.step.aic}
if(rbinom(1,1,p)){
run.current = run.step
run.aic = run.step.aic}
if(run.step.aic < best.aic4){
run4 = run.step
best.aic4 = run.step.aic}
aics4 = c(aics4,run.aic)
}
}
## OUTPUT
run4 		# BEST LIST OF PREDICTORS FOUND
best.aic4 	# AIC VALUE
aics4		# VECTOR OF AIC VALUES
## PLOT OF AIC VALUES
plot(aics4,ylim=c(-420,-360),type="n",ylab="AIC", xlab="Iteration")
lines(aics4)
length(aics4)
(1:1321)[aics4==min(aics4)]
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log)
m = length(baseball.sub[1,])
cooling4 = c(rep(60,8),rep(120,8),rep(220,8)) #cooling schedule
tau.start = 10
tau = rep(tau.start,24)
aics4 = NULL
set.seed(1234)
run4 = rbinom(m,1,.5)
run.current = run4
run.vars = baseball.sub[,run.current==1]
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2]
best.aic4 = run.aic
aics4 = run.aic
for(j in 2:24){tau[j] = 0.9*tau[j-1]}
for(j in 1:24){
for(i in 1:cooling4[j]){
pos = sample(1:m,1)
run.step = run.current
run.step[pos] = !run.current[pos]
run.vars = baseball.sub[,run.step==1]
g = lm(salary.log~.,run.vars)
run.step.aic = extractAIC(g)[2]
p = min(1,exp((run.aic-extractAIC(g)[2])/tau[j]))
if(run.step.aic < run.aic){
run.current = run.step
run.aic = run.step.aic}
if(rbinom(1,1,p)){
run.current = run.step
run.aic = run.step.aic}
if(run.step.aic < best.aic4){
run4 = run.step
best.aic4 = run.step.aic}
aics4 = c(aics4,run.aic)
}
}
## OUTPUT
run4 		# BEST LIST OF PREDICTORS FOUND
best.aic4 	# AIC VALUE
aics4		# VECTOR OF AIC VALUES
## PLOT OF AIC VALUES
plot(aics4,ylim=c(-420,-360),type="n",ylab="AIC", xlab="Iteration")
lines(aics4)
(1:1321)[aics4==min(aics4)]
lines(aics4)
length(aics4)
(1:3201)[aics4==min(aics4)]
## INITIAL VALUES
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log) #case 개수
m = length(baseball.sub[1,]) #독립변수 개수
num.starts = 5 #random start 개수
runs = matrix(0,num.starts,m)
itr = 15
runs.aic = matrix(0,num.starts,itr)
# INITIALIZES STARTING RUNS
set.seed(1234)
for(i in 1:num.starts){runs[i,] = rbinom(m,1,.5)}
#random으로 열을 뽑는 것을 다섯 번 시행
## MAIN
for(k in 1:num.starts){
run.current = runs[k,]
# ITERATES EACH RANDOM START
for(j in 1:itr){
run.vars = baseball.sub[,run.current==1] #1로 선택된 변수들 뽑아내기.
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2] #[1]은 equivalent d.f, [2]가 AIC
run.next = run.current
# TESTS ALL MODELS IN THE 1-NEIGHBORHOOD AND SELECTS THE
# MODEL WITH THE LOWEST AIC
for(i in 1:m){
run.step = run.current
run.step[i] = !run.current[i] #0이라면 1로 1이라면 0으로 바꿈.
run.vars = baseball.sub[,run.step==1] #바뀐 것으로 variable을 새로 뽑음.
g = lm(salary.log~.,run.vars) #model 적용
run.step.aic = extractAIC(g)[2] #AIC 구하기
if(run.step.aic < run.aic){
run.next = run.step
run.aic = run.step.aic
} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic[k,j]=run.aic
}
runs[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
## OUTPUT
runs 		# LISTS OF PREDICTORS
runs.aic 	# AIC VALUES
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(360,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic[i,]) }
##3-1(a)
#setting은 위와 동일
runs2 = matrix(0,num.starts,m)
runs.aic2 = matrix(0,num.starts,itr)
# INITIALIZES STARTING RUNS
set.seed(1234)
for(i in 1:num.starts){runs2[i,] = rbinom(m,1,.5)}
#random으로 열을 뽑는 것을 다섯 번 시행
for(k in 1:num.starts){
run.current = runs2[k,]
# ITERATES EACH RANDOM START
for(j in 1:itr){
run.vars = baseball.sub[,run.current==1] #1로 선택된 변수들 뽑아내기.
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2] #[1]은 equivalent d.f, [2]가 AIC
run.next = run.current
#aic가 작은게 나오면 바로 채택
for(i in 1:m){
run.step = run.current
run.step[i] = !run.current[i] #0이라면 1로 1이라면 0으로 바꿈.
run.vars = baseball.sub[,run.step==1] #바뀐 것으로 variable을 새로 뽑음.
g = lm(salary.log~.,run.vars) #model 적용
run.step.aic = extractAIC(g)[2] #AIC 구하기
if(run.step.aic < run.aic){
run.next = run.step
run.aic = run.step.aic
break
} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic2[k,j]=run.aic
}
runs2[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
runs2
runs.aic2
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic2)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(100,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic2[i,]) }
baseball.dat = read.table('baseball.dat',header=TRUE)
baseball.dat$freeagent = factor(baseball.dat$freeagent)
baseball.dat$arbitration = factor(baseball.dat$arbitration)
baseball.sub = baseball.dat[,-1]
salary.log = log(baseball.dat$salary)
n = length(salary.log) #case 개수
m = length(baseball.sub[1,]) #독립변수 개수
num.starts = 5 #random start 개수
runs = matrix(0,num.starts,m)
itr = 15
runs.aic = matrix(0,num.starts,itr)
# INITIALIZES STARTING RUNS
set.seed(1234)
for(i in 1:num.starts){runs[i,] = rbinom(m,1,.5)}
#random으로 열을 뽑는 것을 다섯 번 시행
## MAIN
for(k in 1:num.starts){
run.current = runs[k,]
# ITERATES EACH RANDOM START
for(j in 1:itr){
run.vars = baseball.sub[,run.current==1] #1로 선택된 변수들 뽑아내기.
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2] #[1]은 equivalent d.f, [2]가 AIC
run.next = run.current
# TESTS ALL MODELS IN THE 1-NEIGHBORHOOD AND SELECTS THE
# MODEL WITH THE LOWEST AIC
for(i in 1:m){
run.step = run.current
run.step[i] = !run.current[i] #0이라면 1로 1이라면 0으로 바꿈.
run.vars = baseball.sub[,run.step==1] #바뀐 것으로 variable을 새로 뽑음.
g = lm(salary.log~.,run.vars) #model 적용
run.step.aic = extractAIC(g)[2] #AIC 구하기
if(run.step.aic < run.aic){
run.next = run.step
run.aic = run.step.aic
} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic[k,j]=run.aic
}
runs[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
## OUTPUT
runs 		# LISTS OF PREDICTORS
runs.aic 	# AIC VALUES
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(360,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic[i,]) }
##3-1(a)
#setting은 위와 동일
runs2 = matrix(0,num.starts,m)
runs.aic2 = matrix(0,num.starts,itr)
# INITIALIZES STARTING RUNS
set.seed(1234)
for(i in 1:num.starts){runs2[i,] = rbinom(m,1,.5)}
#random으로 열을 뽑는 것을 다섯 번 시행
for(k in 1:num.starts){
run.current = runs2[k,]
# ITERATES EACH RANDOM START
for(j in 1:itr){
run.vars = baseball.sub[,run.current==1] #1로 선택된 변수들 뽑아내기.
g = lm(salary.log~.,run.vars)
run.aic = extractAIC(g)[2] #[1]은 equivalent d.f, [2]가 AIC
run.next = run.current
#aic가 작은게 나오면 바로 채택
for(i in 1:m){
run.step = run.current
run.step[i] = !run.current[i] #0이라면 1로 1이라면 0으로 바꿈.
run.vars = baseball.sub[,run.step==1] #바뀐 것으로 variable을 새로 뽑음.
g = lm(salary.log~.,run.vars) #model 적용
run.step.aic = extractAIC(g)[2] #AIC 구하기
if(run.step.aic < run.aic){
run.next = run.step
run.aic = run.step.aic
break
} #만약 AIC가 더 작다면 run.next로 할당해줌. 그리고 run.aic도 바꿔줌
}
run.current = run.next #run.next를 current에 적용.
runs.aic2[k,j]=run.aic
}
runs2[k,] = run.current #최종적으로 제일 작은 aic를 가진 subset이 골라짐.
}
runs2
runs.aic2
##PLOT
plot(1:(itr*num.starts),-c(t(runs.aic2)),xlab="Cumulative Iterations",
ylab="Negative AIC",ylim=c(100,420),type="n")
for(i in 1:num.starts) {
lines((i-1)*itr+(1:itr),-runs.aic2[i,]) }
